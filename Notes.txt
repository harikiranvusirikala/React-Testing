Topics:
===
• Testing Components
• Mocking APls
• Testing Forms
• Testing State Management
• Testing Authentication
• Testing Routing

$ npx @eslint/migrate-config .eslintrc.cjs

Start application (it will start backend in port 3000, frontend in port 5173)
$ npm start

Setting Up Vitest:
$ npm i -D vitest

    "test": "vitest",
    "test:ui": "vitest --ui"

Install VS Code extension "Vitest Snippets" this helps in imports essentials function by just typing:
iv - import vitest
d - describe
i - it
e - expect

$ npm t
$ npm run test:ui

To test react components we need few tools,
1. the first is react testing library which allow us to render components and interact with them just like the end user.

- https://www.npmjs.com/package/@testing-library/react
$ npm i -D @testing-library/react@14.2.0

2. By default our tests are run in node environment, but node dosen't know anything about browser APIs like the DOM,
So to test our react components we need to run our tests within an environment that emulates a browser environment.
• JSDOM
• HappyDOM - faster, but lacks some APIs

- https://www.npmjs.com/package/jsdom
$ npm i -D jsdom@24.0.0

Now update vitest.config.ts to tell tests to use jsdom for environment.
$ npm run test:ui

3. jest-dom library gives us bunch of matchers for writing assertions against the Dom.
for example:
• we can check to see if an element is in the Dom
• if it has the right content and so on

- https://www.npmjs.com/package/@testing-library/jest-dom
$ npm i -D @testing-library/jest-dom@6.4.0


Concepts:
• What to test
• Testing rendering
• Testing user interactions
• Working with component libs
• Techniques to simplify tests
• Catching issues with ESLint
• Mocking APIs
• Testing forms
• Testing state management
• Testing authentication
• Testing routing

• What to test
Test the behaviour(what the app does), not the implementation(how it's implemented)
In react we expect to have more Integration tests > Unit tests > E2E tests
Test the behaviour, not the styles.

• Testing rendering
As writing a jsx expression we need to rename the application to have .test.tsx extension.

screen.debug()
We can see the state of the Virtual DOM in Vitest UI Console section of the test.

- https://testing-library.com/docs/queries/byrole
screen.geByRole()

- https://github.com/testing-library/jest-dom?tab=readme-ov-file#table-of-contents > Custom matchers
Warning: toBeInTheDOM has been deprecated and will be removed in future updates.
Please use toBeInTheDocument for searching the entire document and toContainElement for searching a specific container.

If test is failing we can see the Report section in Vitest UI for the state of DOM and error.

Simplifying Test Setup:
use vitest globals and remove vitest imports from each test file.
import { it, expect, describe } from 'vitest';

have a setup.ts file to have the custom matchers. Stop and re-run the tests. 
import '@testing-library/jest-dom/vitest'

Install VS Code extension "Testing Library Snippets" and for below line type "itr" and enter
import { render, screen } from '@testing-library/react';

.tbind will be enough which are first letter to have the .toBeInTheDocument


User Interactions
- https://testing-library.com/docs/user-event/intro

npm i -D @testing-library/user-event

Enter lorem100 to generate lorem text

qt enter will generate screen.getByText()
qr enter will generate screen.getByRole('id')

Simplifying Tests
• Can have rendering of component and getting elements in a separate function.
• .geByRole will throw error if it is not available.
So no need of .toBeInTheDocument, but no other expects there then it's better to add .toBeInTheDocument

